Imports System.Data.SqlClient
Imports System.Security.Cryptography


Public Class DataAccess

    Private Shared conexion As New SqlConnection 'variable de conexión global'
    Private Shared excepcion As String = "" 'variable de excepción global'
    Private Shared comando As New SqlCommand
    Private Shared reader As SqlDataReader
    Private Shared HashedPass As String = ""






    '*************' FUNCIONES DE ACCESO *************'

    Public Function login(ByVal pUser As String, ByVal pPass As String) As Boolean

        If openConnection() Then

            Using SHA1hash As SHA1 = SHA1.Create()
                HashedPass = System.Convert.ToBase64String(SHA1hash.ComputeHash(System.Text.Encoding.ASCII.GetBytes(pPass)))
            End Using

            'Definir y ejecutar la consulta'
            Dim st As String = "select count(*) from Usuarios where email='" & pUser & "' and pass='" & HashedPass & "';"
            comando = New SqlCommand(st, conexion)
            Dim count As Integer = comando.ExecuteScalar()

            'imprimo la consulta en consola para verificar que es correcta'
            Console.WriteLine(st)

            closeConnection()
            If count = 1 Then
                Return True
            Else
                Return False
            End If
        Else
            'BD no conectada'
            MsgBox("*** Error de conexión al servidor de BD: " + excepcion + "***")
            closeConnection()
            Return False
        End If
    End Function


    Public Function registro(ByVal pUser As String, ByVal pPass As String, ByVal pNombre As String, ByVal pApellidos As String, ByVal pTipo As String) As Boolean
        If openConnection() Then

            'Verifico que el usuario no existe previamente en la bd'
            Dim st As String = "select count(*) from Usuarios where email='" & pUser & "';"
            Dim comando = New SqlCommand(st, conexion)
            Dim count As Integer = comando.ExecuteScalar()

            Console.WriteLine(st)

            If count = 1 Then
                MsgBox("DEBUG: DataAccess >> usuario ya existe (primer if).")
                closeConnection()
                Return False
            Else
                'Encripto la contraseña'
                Using SHA1hash As SHA1 = SHA1.Create()
                    HashedPass = System.Convert.ToBase64String(SHA1hash.ComputeHash(System.Text.Encoding.ASCII.GetBytes(pPass)))
                End Using

                'Definir y ejecutar la consulta'
                st = "insert into Usuarios(email, nombre, apellidos, numconfir, confirmado, tipo, pass) values('" & pUser & "', '" & pNombre & "', '" & pApellidos & "', 0, 0, '" & pTipo & "', '" & HashedPass & "');"
                comando = New SqlCommand(st, conexion)
                Try
                    count = comando.ExecuteNonQuery()
                    closeConnection()
                Catch ex As Exception
                    MsgBox("DEBUG: DataAccess >> error de inserción (segundo if). " + ex.Message)
                    closeConnection()
                    Return False
                End Try
                closeConnection()
                'Si no ha fallado, devuelve true'
                Return True

            End If

        Else
            'BD no conectada'
            MsgBox("*** Error de conexión al servidor de BD: " + excepcion + "***")
            closeConnection()
            Return False
        End If
    End Function

    Public Function cambiarPassword(ByVal pNuevaPassword As String, pCodigoRecuperacion As String, pEmail As String) As Boolean
        Return True
    End Function







    '*************' FUNCIONES DE CONEXIÓN *************'

    Public Shared Function openConnection() As Boolean
        Try
            conexion.ConnectionString = "Server=tcp:has21-13.database.windows.net,1433;Initial Catalog=has21-13;Persist Security Info=False;User ID=has21-13;Password=fiss21&&;MultipleActiveResultSets=True;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
            conexion.Open()
        Catch ex As Exception
            excepcion = ex.Message
            Return False
        End Try
        Return True
    End Function

    Public Shared Sub closeConnection()
        comando.Dispose()
        conexion.Close()
    End Sub


End Class